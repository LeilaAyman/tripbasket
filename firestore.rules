rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        resource != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role.hasAny(['admin']);
    }
    
    function isAgency() {
      return isAuthenticated() && 
        resource != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role.hasAny(['agency']);
    }
    
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }
    
    function getCurrentUserAgencyRef() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agency_reference;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Agencies collection (support both collection names for compatibility)
    match /agencies/{agencyId} {
      allow read: if true; // Public read for agency listing
      allow write: if isAdmin() || (isAgency() && resource.id == getCurrentUserAgencyRef().id);
    }
    
    match /agency/{agencyId} {
      allow read: if true; // Public read for agency listing  
      allow write: if isAdmin() || (isAgency() && resource.id == getCurrentUserAgencyRef().id);
    }
    
    // Trips collection
    match /trips/{tripId} {
      allow read: if true; // Public read for trip browsing
      allow create: if isAgency() || isAdmin();
      allow update, delete: if isAdmin() || 
        (isAgency() && resource.data.agency_reference == getCurrentUserAgencyRef());
    }
    
    // Bookings collection - Updated with new payment fields
    match /bookings/{bookingId} {
      allow read: if isAdmin() || 
        isOwner(resource.data.user_reference.id) ||
        (isAgency() && resource.data.agency_reference == getCurrentUserAgencyRef());
      allow create: if isAuthenticated();
      allow update: if isAdmin() ||
        (isAgency() && resource.data.agency_reference == getCurrentUserAgencyRef()) ||
        isOwner(resource.data.user_reference.id);
      allow delete: if isAdmin();
    }
    
    // Messages collection - New messaging system
    match /messages/{messageId} {
      allow read: if isAdmin() || 
        // Customer can read their own messages
        isOwner(resource.data.from.id) ||
        isOwner(resource.data.to.id) ||
        // Agency can read messages for their agency
        (isAgency() && resource.data.agency_reference == getCurrentUserAgencyRef());
      
      allow create: if isAuthenticated() && 
        // Customer can create messages to agencies or admin
        (request.auth.uid == request.resource.data.from.id) &&
        (request.resource.data.message_type in ['customer_to_agency', 'customer_to_admin']) ||
        // Agency can reply to customers
        (isAgency() && request.resource.data.message_type == 'agency_to_customer' &&
         request.resource.data.agency_reference == getCurrentUserAgencyRef()) ||
        // Admin can send any message
        (isAdmin() && request.resource.data.message_type in ['admin_to_customer', 'admin_to_agency']);
      
      allow update: if isAdmin() || 
        // Allow marking messages as read
        (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read_status']));
      
      allow delete: if isAdmin();
    }
    
    // Reviews collections
    match /reviews/{reviewId} {
      allow read: if true; // Public read
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin() || isOwner(resource.data.user_reference.id);
    }
    
    match /agency_reviews/{reviewId} {
      allow read: if true; // Public read
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin() || isOwner(resource.data.user_reference.id);
    }
    
    // Cart collection
    match /cart/{cartId} {
      allow read, write: if isOwner(cartId) || isAdmin();
    }
    
    // Any other collections - restrict by default
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}